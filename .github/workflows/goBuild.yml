name: Go
on: 
  push: # Sequence of patterns matched against refs/tags
#    tags:
#    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
jobs:
  BuildAndTestWindows:
    name: BuildWindows
    strategy:
      matrix:
        go: [1.13]
    runs-on: windows-latest
    steps:
    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go
    - name: Check out code into the Go module directory
      uses: actions/checkout@v1
    - name: Build and test
      shell: bash
      run: |
        go test ./src/
  BuildAndTestLinux:
    name: BuildLinux
    strategy:
      matrix:
        go: [ 1.13]
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go
    - name: Check out code into the Go module directory
      uses: actions/checkout@v1
    - name: Installing go-cov
      run: go get github.com/jstemmer/go-junit-report github.com/axw/gocov/gocov/... github.com/AlekSi/gocov-xml
    - name: Build and test
      run: |
        export PATH=$PATH:$(go env GOPATH)/bin
        env GO111MODULE=on make clean validate test integration-test

###CREATING A RELEASE ONLY IF WINDOWS AND LINUX TESTS HAVE SUCCEED###

  CreateRelease:
    name: CreateRelease
    needs: [BuildAndTestLinux, BuildAndTestWindows]
    container: golang:${{ matrix.go }}-stretch 
    strategy:
      matrix:
        go: [1.13]
    runs-on: ubuntu-latest
    steps:
    - name: CreateRelease
      uses: actions/create-release@v1.0.0
      id: create_release 
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}-gihub-generated
        release_name: ${{ github.ref }}-github-generated
        draft: false
        prerelease: false
    - name: saveResult
      run: steps.create_release.outputs.upload_url > tmp
    - name: Upload math result for job 2
      uses: actions/upload-artifact@v1
      with:
        name: upload_url
        path: tmp


  ###UPLOADING ARTIFACTS TO LINUX MERELY IF THE RELEASE HAS BEEN CREATED###


  CreateAdnPushUnixExecutable:
    name: CreateAdnPushUnixExecutable
    needs: [CreateRelease]
    strategy:
      matrix:
        go: [ 1.13]
    runs-on: ubuntu-latest
    #container: golang:${{ matrix.go }}-stretch Docker Compose is missing
    steps:
    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go
    - name: Check out code into the Go module directory
      uses: actions/checkout@v1
    - name: Install dependencies
      run: |
        sudo apt-get install rpm ruby ruby-dev rubygems build-essential
        sudo gem install --no-document fpm
        sudo make package
        ls -all -R
    - name: Download tmp 
      uses: actions/download-artifact@v1
      with:
        name: tmp
    - name: Set output
      id: vars
      run: echo ::set-output name=upload_url::$(cat tmp)
    - name: Upload Release Asset Binary
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.vars.outputs.upload_url }} 
        asset_path: ./target/bin/linux_amd64/nri-apache
        asset_name: nri-apache
        asset_content_type: binary
    - name: Upload Release Asset RPM
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.vars.outputs.upload_url }} 
        asset_path: ./target/packages/rpm/nri-apache-0.0.0-dev.x86_64.rpm
        asset_name: nri-apache-0.0.0-dev.x86_64.rpm
        asset_content_type: rpm
    - name: Upload Release Asset DEB
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.vars.outputs.upload_url }} 
        asset_path: ./target/packages/deb/nri-apache_0.0.0-dev_amd64.deb
        asset_name: nri-apache_0.0.0-dev_amd64.deb
        asset_content_type: deb
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.vars.outputs.upload_url }} 
        asset_path: ./target/packages/tarball/nri-apache_linux_0.0.0_amd64.tar.gz
        asset_name: nri-apache_linux_0.0.0_amd64.tar.gz
        asset_content_type: tar

  ###UPLOADING ARTIFACTS TO WINDOWS MERELY IF THE RELEASE HAS BEEN CREATED###


  CreateAdnPushWindowsExecutable:
    name: CreateAdnPushWindowsExecutable
    needs: [CreateRelease]
    strategy:
      matrix:
        go: [1.13]
    runs-on: windows-latest
    steps:
    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go
    - name: Check out code into the Go module directory
      uses: actions/checkout@v1
    - name: Build and test
      shell: bash
      run: |
        go build -v -o ./bin/nri-apache.exe  ./src/
    - name: Download tmp 
      uses: actions/download-artifact@v1
      with:
        name: tmp
    - name: Set output
      id: vars
      run: echo ::set-output name=upload_url::$(cat tmp)
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.vars.outputs.outputs.upload_url }}
        asset_path: ./bin/nri-apache.exe
        asset_name: nri-apache.exe
        asset_content_type: Windows executable
