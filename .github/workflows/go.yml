name: Go
on: 
  push: # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
jobs:
  build:
    name: Build
    strategy:
      matrix:
        go: [ 1.13]
    runs-on: ubuntu-latest
    #container: golang:${{ matrix.go }}-stretch Docker Compose is missing
    steps:
    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go
    - name: Check out code into the Go module directory
      uses: actions/checkout@v1
    - name: Installing go-cov
      run: go get github.com/jstemmer/go-junit-report github.com/axw/gocov/gocov/... github.com/AlekSi/gocov-xml
    - name: Build and test
      run: |
        export PATH=$PATH:$(go env GOPATH)/bin
        env GO111MODULE=on make clean validate test integration-test
    - name: Install dependencies
      run: |
        sudo apt-get install rpm ruby ruby-dev rubygems build-essential
        sudo gem install --no-document fpm
        sudo make package
        ls -all -R
    - name: CreateRelease
      uses: actions/create-release@v1.0.0
      id: create_release 
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}-gihub-generated
        release_name: ${{ github.ref }}-github-generated
        draft: false
        prerelease: false
    - name: Upload Release Asset Binary
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./target/bin/linux_amd64/nri-apache
        asset_name: nri-apache
        asset_content_type: binary
    - name: Upload Release Asset RPM
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./target/packages/rpm/nri-apache-0.0.0-dev.x86_64.rpm
        asset_name: nri-apache-0.0.0-dev.x86_64.rpm
        asset_content_type: rpm
    - name: Upload Release Asset DEB
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./target/packages/deb/nri-apache_0.0.0-dev_amd64.deb
        asset_name: nri-apache_0.0.0-dev_amd64.deb
        asset_content_type: deb
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./target/packages/tarball/nri-apache_linux_0.0.0_amd64.tar.gz
        asset_name: nri-apache_linux_0.0.0_amd64.tar.gz
        asset_content_type: tar
